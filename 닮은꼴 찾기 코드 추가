#같은 파일 내에 db(사진 파일) 두고 사진 이름 영어로 설정


import streamlit as st
import cv2
import numpy as np
from deepface import DeepFace
import os
import traceback

st.set_page_config(page_title="주성고등학교 동아리 코싸인", layout="centered")

# ---------------- 세션 상태 초기화 ----------------
if "page" not in st.session_state:
    st.session_state.page = "home"
if "last_image_path" not in st.session_state:
    st.session_state.last_image_path = None
if "last_analysis" not in st.session_state:
    st.session_state.last_analysis = None

st.markdown("<h1 style='text-align:center;'>얼굴 인식 인공지능</h1>", unsafe_allow_html=True)

# ---------------- 홈 페이지 ----------------
if st.session_state.page == "home":
    st.markdown("""
        <div style='margin-bottom:10px; padding:20px; border-radius:15px; background-color:#f0f9ff; text-align:center;'>
            <p>딥러닝 기반 DeepFace를 이용한 얼굴 인식입니다.</p>
        </div>
    """, unsafe_allow_html=True)

    if st.button("사진 찍어 분석"):
        st.session_state.page = "camera_internal"
        st.rerun()

# ---------------- 카메라 페이지 ----------------
elif st.session_state.page == "camera_internal":
    st.markdown("<h3 style='text-align:center;'>사진 찍어 분석하기</h3>", unsafe_allow_html=True)
    uploaded_image = st.camera_input("카메라로 사진을 찍어주세요")

    if uploaded_image is not None:
        try:
            # OpenCV 이미지로 변환
            file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
            img_bgr = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

            if img_bgr is not None:
                # 파일로 저장
                image_path = "captured_image.jpg"
                cv2.imwrite(image_path, img_bgr)
                st.session_state.last_image_path = image_path

                try:
                    # age와 gender만 분석
                    result = DeepFace.analyze(
                        img_path=image_path,
                        actions=["age", "gender"],
                        enforce_detection=False
                    )

                    if isinstance(result, list) and len(result) > 0:
                        d = result[0]
                    elif isinstance(result, dict):
                        d = result
                    else:
                        d = None

                    # 👇 눈 값 null 체크 (None 이면 경고)
                    if d is not None:
                        left_eye = d.get("region", {}).get("left_eye")
                        right_eye = d.get("region", {}).get("right_eye")

                        if left_eye is None or right_eye is None:
                            st.warning("눈 위치를 감지하지 못했습니다. 사진을 다시 찍어주세요.")
                            d = None  # 저장하지 않음
                        else:
                            st.success("분석 완료!")  # ✅ 분석 성공 메시지

                    st.session_state.last_analysis = d

                except Exception as e:
                    st.error(f"DeepFace 분석 오류: {e}")
                    traceback.print_exc()
            else:
                st.error("이미지를 읽을 수 없습니다.")

        except Exception as e:
            st.error(f"이미지 처리 오류: {e}")
            traceback.print_exc()

    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("결과 화면으로 이동"):
            st.session_state.page = "result"
            st.rerun()
    with col2:
        if st.button("뒤로가기"):
            st.session_state.page = "home"
            st.rerun()

# ---------------- 결과 페이지 ----------------
elif st.session_state.page == "result":
    st.markdown("<h2 style='text-align:center;'>\n결과 화면</h2>", unsafe_allow_html=True)

    # 닮은꼴 찾기
    if st.button("닮은꼴 찾기"):
        if st.session_state.last_image_path is None:
            st.error("분석할 사진이 없습니다.")
        else:
            try:
                db_path = "db"  # DB 폴더 (얼굴 이미지 여러 장 넣기)
                if not os.path.exists(db_path):
                    st.warning("DB 폴더가 없습니다. db 폴더를 만들어주세요.")
                else:
                    df = DeepFace.find(
                        img_path=st.session_state.last_image_path,
                        db_path=db_path,
                        model_name="VGG-Face",
                        enforce_detection=False
                    )

                    if df and len(df) > 0 and not df[0].empty:
                        best_match = df[0].iloc[0]  # 가장 닮은 이미지
                        st.success(f"닮은 사람: {os.path.basename(best_match['identity'])}")
                        st.image(best_match['identity'], caption="닮은꼴 사진", use_container_width=True)
                    else:
                        st.warning("DB에서 닮은꼴을 찾지 못했습니다. (얼굴 감지 실패 가능)")

            except Exception as e:
                st.error(f"닮은꼴 찾기 오류: {e}")
                traceback.print_exc()

    # 미래 얼굴 보기
    if st.button("미래 얼굴 보기"):
        st.warning("미래 얼굴 기능은 별도 face-aging 모델이 필요합니다.")

    # 다른 성별 얼굴
    import torch
    from PIL import Image
    import numpy as np
    import streamlit as st
    import cv2
    from torchvision import transforms
    import os
    
    # StarGAN 모델 로딩 함수
    def load_stargan_model(model_path="stargan_model.pth"):
        """
        모델을 로드하는 함수
        :param model_path: StarGAN 모델 경로
        :return: 모델 객체 또는 None
        """
        if not os.path.exists(model_path):
            st.error(f"모델 파일이 존재하지 않습니다: {model_path}")
            return None
        try:
            model = torch.load(model_path)  # 모델 로딩
            model.eval()  # 추론 모드로 설정
            return model
        except Exception as e:
            st.error(f"StarGAN 모델 로딩 오류: {e}")
            return None
    
    # 성별 변환 함수
    def change_gender(image_path, model):
        """
        성별 변환을 처리하는 함수
        :param image_path: 입력 이미지 경로
        :param model: StarGAN 모델
        :return: 성별 변환된 이미지 (PIL 이미지)
        """
        try:
            # 이미지 로딩
            img = Image.open(image_path).convert('RGB')
    
            # 이미지 전처리: StarGAN 모델에 맞는 형태로 변환
            transform = transforms.Compose([
                transforms.Resize((256, 256)),  # 모델 입력 크기
                transforms.ToTensor(),  # 텐서 변환
                transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])  # 정규화 ([-1, 1] 범위)
            ])
    
            img_tensor = transform(img).unsqueeze(0)  # 배치 차원 추가
    
            # 모델에 입력
            with torch.no_grad():
                output = model(img_tensor)
    
            # 결과 이미지 후처리
            output_image = output.squeeze().permute(1, 2, 0).cpu().numpy()
            output_image = (output_image + 1) / 2  # -1 ~ 1 범위에서 0 ~ 1로 변환
            output_image = (output_image * 255).astype(np.uint8)
    
            # PIL 이미지로 변환
            output_pil = Image.fromarray(output_image)
            return output_pil
        except Exception as e:
            st.error(f"성별 변환 오류: {e}")
            return None
    
    # 성별 변환 버튼을 Streamlit에서 구현
    if st.button("성별 바꾸기"):
        if st.session_state.last_image_path is None:
            st.error("분석할 사진이 없습니다.")
        else:
            try:
                # StarGAN 모델 로드
                model = load_stargan_model("stargan_model.pth")  # 모델 경로는 필요시 수정
    
                if model is not None:
                    # 성별 변환
                    transformed_image = change_gender(st.session_state.last_image_path, model)
    
                    if transformed_image is not None:
                        # 변환된 이미지 출력
                        st.image(transformed_image, caption="성별 변환된 얼굴", use_container_width=True)
                    else:
                        st.error("성별 변환 중 오류가 발생했습니다.")
                else:
                    st.error("모델 로딩에 실패했습니다.")
            except Exception as e:
                st.error(f"성별 변환 처리 중 오류가 발생했습니다: {e}")
                traceback.print_exc()
    
    # 홈으로 돌아가기 버튼
    if st.button("홈으로 돌아가기"):
        st.session_state.page = "home"
        st.rerun()
    
        
