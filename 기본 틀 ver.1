import streamlit as st
import cv2
import numpy as np
from deepface import DeepFace
import pandas as pd
import traceback
import os

st.set_page_config(page_title="주성고등학교 동아리 코싸인", layout="centered")

# 세션 상태 초기화
if "page" not in st.session_state:
    st.session_state.page = "home"
if "last_image" not in st.session_state:
    st.session_state.last_image = None
if "last_analysis" not in st.session_state:
    st.session_state.last_analysis = None

st.markdown("<h1 style='text-align: center;'>얼굴 인식 인공지능</h1>", unsafe_allow_html=True)

# ------------------ 홈 페이지 ------------------
if st.session_state.page == "home":
    st.markdown("""
        <div style='margin-bottom:10px; padding:20px; border-radius:15px; background-color:#f0f9ff;'>
            <h2></h2>
            <p>딥러닝 기반 DeepFace를 이용한 얼굴 인식입니다.</p>
        </div>
    """, unsafe_allow_html=True)

    if st.button("사진 찍어 분석"):
        st.session_state.page = "camera_internal"
        st.rerun()

# ------------------ 카메라 페이지 ------------------
elif st.session_state.page == "camera_internal":
    st.markdown("## 사진 찍어 분석하기")
    uploaded_image = st.camera_input("카메라로 사진을 찍어주세요")

    if uploaded_image is not None:
        try:
            file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
            img_bgr = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

            if img_bgr is not None:
                st.session_state.last_image = img_bgr.copy()

                try:
                    # age와 gender만 분석
                    result = DeepFace.analyze(
                        img_bgr,
                        actions=["age", "gender"],
                        enforce_detection=False
                    )

                    if isinstance(result, list) and len(result) > 0:
                        d = result[0]
                    elif isinstance(result, dict):
                        d = result
                    else:
                        d = None

                    st.session_state.last_analysis = d

                    if d:
                        st.write("**분석 결과**")
                        st.json(d)

                except Exception as e:
                    st.error(f"DeepFace 분석 오류: {e}")
                    traceback.print_exc()
            else:
                st.error("이미지를 읽을 수 없습니다.")
        except Exception as e:
            st.error(f"이미지 처리 오류: {e}")
            traceback.print_exc()

    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("결과 화면으로 이동"):
            st.session_state.page = "result"
            st.rerun()
    with col2:
        if st.button("뒤로가기"):
            st.session_state.page = "home"
            st.rerun()

# ------------------ 결과 페이지 ------------------
elif st.session_state.page == "result":
    st.markdown("## 결과 화면")

    # 닮은꼴 찾기
    if st.button("닮은꼴 찾기"):
        st.warning("닮은꼴 찾기 기능은 별도 face-aging 모델이 필요합니다.")

    # 미래 얼굴 보기
    if st.button("미래 얼굴 보기"):
        st.warning("미래 얼굴 기능은 별도 face-aging 모델이 필요합니다.")

    # 다른 성별 얼굴
    if st.button("성별 바꾸기"):
        st.warning("성별 변환 기능은 별도 모델이 필요합니다.")

    if st.button("홈으로 돌아가기"):
        st.session_state.page = "home"
        st.rerun()
