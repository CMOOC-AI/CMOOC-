import streamlit as st
import sys
import subprocess
import os
import cv2
import numpy as np
from deepface import DeepFace
import traceback
import pandas as pd
import altair as alt

st.set_page_config(page_title="주성고등학교 동아리 코싸인", layout="centered", page_icon="logo.png")

if "page" not in st.session_state:
    st.session_state.page = "home"
if "webcam_proc" not in st.session_state:   
    st.session_state.webcam_proc = None
if "gender_counts" not in st.session_state:
    st.session_state.gender_counts = {"Male": 0, "Female": 0}
if "last_analysis" not in st.session_state:
    st.session_state.last_analysis = None

st.markdown("<h1 style='text-align: center; color: white;'>얼굴 인식 인공지능</h1>", unsafe_allow_html=True)

if st.session_state.page == "home":
    st.markdown("""
        <div style='margin-bottom:10px; padding:20px; border-radius:15px; background-color:#f0f9ff;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1); height:200px;'>
            <h2>성별 · 인종 · 감정 분석</h2>
            <p>딥러닝 기반 DeepFace를 이용한 얼굴 인식입니다. 아래 방법 중 하나를 선택하세요.</p>
        </div>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        if st.button("사진 찍어 분석"):
            st.session_state.page = "camera_internal"
            st.rerun()

    with col2:
        if st.button("웹캠 실행"):
            if not os.path.exists("webcam.py"):
                st.error("webcam.py 파일을 찾을 수 없습니다. 경로를 확인하세요.")
            else:
                try:
                    if st.session_state.webcam_proc is None or st.session_state.webcam_proc.poll() is not None:
                        st.session_state.webcam_proc = subprocess.Popen([sys.executable, "webcam.py"])
                        st.success("로컬 OpenCV 웹캠 스크립트 실행 중...")
                    else:
                        st.info("이미 웹캠 스크립트가 실행 중입니다.")
                except Exception as e:
                    st.error(f"webcam.py 실행 실패: {e}")

    st.write("---")

elif st.session_state.page == "camera_internal":
    st.markdown("## 사진 찍어 분석하기")
    st.write("카메라로 사진을 찍으면 DeepFace로 분석하고, 얼굴 박스와 라벨을 표시합니다.")
    uploaded_image = st.camera_input("카메라로 사진을 찍어주세요")

    if uploaded_image is not None:
        try:
            file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
            img_bgr = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

            if img_bgr is None:
                st.error("이미지를 읽을 수 없습니다.")
            else:
                try:
                    result = DeepFace.analyze(
                        img_bgr,
                        actions=["age", "gender", "race", "emotion"],
                        enforce_detection=False
                    )

                    if isinstance(result, list) and len(result) > 0:
                        d = result[0]
                    elif isinstance(result, dict):
                        d = result
                    else:
                        d = None

                    st.session_state.last_analysis = d
                    display_img = img_bgr.copy()
                    label_text = ""

                    if d:
                        region = d.get("region", None)
                        age = d.get("age", "")
                        gender = d.get("dominant_gender", "")
                        race = d.get("dominant_race", "")
                        emotion = d.get("dominant_emotion", "")

                        st.session_state.emotion = d.get("emotion", {})
                        label_text = f"{age} | {gender} | {race} | {emotion}"

                        gender_lower = str(gender).lower()
                        if "male" in gender_lower or "man" in gender_lower:
                            st.session_state.gender_counts["Male"] += 0.7
                        elif "female" in gender_lower or "woman" in gender_lower:
                            st.session_state.gender_counts["Female"] += 0.7
                        else:
                            st.session_state.gender_counts["Male"] += 0.5
                            st.session_state.gender_counts["Female"] += 0.5

                        if region:
                            x = int(max(0, region.get("x", 0)))
                            y = int(max(0, region.get("y", 0)))
                            w = int(max(0, region.get("w", 0)))
                            h = int(max(0, region.get("h", 0)))

                            h_img, w_img = display_img.shape[:2]
                            x = min(x, w_img - 1)
                            y = min(y, h_img - 1)
                            w = min(w, w_img - x)
                            h = min(h, h_img - y)

                            cv2.rectangle(display_img, (x, y), (x + w, y + h), (0, 255, 0), 2)
                            cv2.putText(display_img, label_text, (x, max(0, y - 10)),
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                    else:
                        st.warning("분석 결과가 없습니다.")

                    display_rgb = cv2.cvtColor(display_img, cv2.COLOR_BGR2RGB)
                    st.image(display_rgb, caption=label_text, use_container_width=True)
                    st.write("**분석 결과 원본 데이터**")
                    st.json(d)

                except Exception as e:
                    st.error(f"DeepFace 분석 중 오류 발생: {e}")
                    traceback.print_exc()
        except Exception as e:
            st.error(f"이미지 처리 중 오류: {e}")
            traceback.print_exc()

    st.markdown("---")
    c1, c2 = st.columns(2)
    with c1:
        if st.button("결과 화면으로 이동"):
            st.session_state.page = "result"
            st.rerun()
    with c2:
        if st.button("뒤로가기"):
            st.session_state.page = "home"
            st.rerun()

elif st.session_state.page == "result":
    st.markdown("## 결과 화면")
    st.write("측정 결과는 아래 카드에 표시됩니다.")

    # 성별
    st.markdown("""
        <div style="
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.08);
            padding: 16px;
            margin-bottom: 12px;">
            <div style="font-size:18px; font-weight:700; margin-bottom:6px;">성별</div>
            <div style="font-size:13px; color:#333; margin-bottom:8px;">분석된 얼굴 속 남성과 여성 비율</div>
        </div>
    """, unsafe_allow_html=True)

    gender_counts = st.session_state.gender_counts.copy()
    df_gender = pd.DataFrame({
        "gender": list(gender_counts.keys()),
        "count": list(gender_counts.values())
    }).set_index("gender")
    st.bar_chart(df_gender)

    # 감정
    st.markdown("""
        <div style="
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.08);
            padding: 24px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: left;
            margin-bottom: 20px;">
            <div style="font-size:20px; font-weight:700; margin-bottom:8px;">감정</div>
        </div>
    """, unsafe_allow_html=True)
    
    if "emotion" in st.session_state and st.session_state.emotion:
        col1, col2 = st.columns([3, 1])

        with col1:
            df_emotion = pd.DataFrame({
                "emotion": list(st.session_state.emotion.keys()),
                "value": list(st.session_state.emotion.values())
            })
            df_emotion['color'] = df_emotion['emotion'].apply(lambda x: 'red' if x == 'angry' else '#1f77b4')

            chart = alt.Chart(df_emotion).mark_bar().encode(
                x='emotion',
                y='value',
                color=alt.Color('color', scale=None)
            ).properties(height=300)
            st.altair_chart(chart, use_container_width=True)

        with col2:
            dominant_emotion = max(st.session_state.emotion, key=st.session_state.emotion.get)
            emotion_icons = {
                "sad": "sad.png",
                "angry": "angry.png",
                "surprise": "surprise.png",
                "neutral": "neutral.png"
            }
            if dominant_emotion in emotion_icons and os.path.exists(emotion_icons[dominant_emotion]):
                st.image(emotion_icons[dominant_emotion], width=170, caption=dominant_emotion)
    # 닮은 꼴 
    st.markdown("""
        <div style="
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.08);
            padding: 24px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: left;
            margin-bottom: 20px;">
            <div style="font-size:20px; font-weight:700; margin-bottom:8px;">닮은꼴 찾기</div>
        </div>
    """, unsafe_allow_html=True)

    st.markdown("""
        <style>
            div.stButton > button {
                background-color: skyblue;
                color: white;
                border-radius: 12px;
                padding: 10px 20px;
                font-size: 18px;
                font-weight: bold;
                border: none;
                cursor: pointer;
                transition: 0.3s;
            }
            div.stButton > button:hover {
                background-color: gray;
                transform: scale(1.05);
            }
        </style>
    """, unsafe_allow_html=True)

    if st.button("홈으로 돌아가기"):
        st.session_state.page = "home"
        st.rerun()

if st.session_state.webcam_proc is not None:
    stop_col, info_col = st.columns([1, 3])
    with stop_col:
        if st.button("로컬 웹캠 종료"):
            try:
                if st.session_state.webcam_proc.poll() is None:
                    st.session_state.webcam_proc.terminate()
                    st.session_state.webcam_proc = None
                    st.success("로컬 웹캠 스크립트를 종료했습니다.")
                else:
                    st.info("이미 종료되어 있습니다.")
            except Exception as e:
                st.error(f"종료 중 오류: {e}")
    with info_col:
        st.write("로컬 OpenCV 윈도우가 열려있습니다. (직접 종료하려면 q를 누르세요.)")

