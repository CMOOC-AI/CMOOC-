# 시작할 때(가상환경 활성화) - python -m venv venv
# 웹사이트 실행 - streamlit run app.py

import streamlit as st
import sys
import subprocess
import io
import os
import cv2
import numpy as np
from deepface import DeepFace
import traceback
import pandas as pd

st.set_page_config(page_title="얼굴 인식 인공지능 deepface", layout="centered")

# -----------------------
# 세션 상태 초기화
# -----------------------
if "page" not in st.session_state:
    st.session_state.page = "home"
if "webcam_proc" not in st.session_state:
    st.session_state.webcam_proc = None
# 성별 카운트(남자/여자) 누적 저장
if "gender_counts" not in st.session_state:
    st.session_state.gender_counts = {"Male": 0, "Female": 0}
# 최근 분석 원본 데이터 보존 (선택)
if "last_analysis" not in st.session_state:
    st.session_state.last_analysis = None

st.markdown("<h1 style='text-align: center; color: black;'>얼굴 인식 인공지능</h1>", unsafe_allow_html=True)

# ---------- 홈 화면 ----------
if st.session_state.page == "home":
    st.markdown(
        """
        <div style='margin-bottom:10px; padding:20px; border-radius:15px; background-color:#f0f9ff;
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1); height:200px;'>
            <h2>성별 · 인종 · 감정 분석</h2>
            <p>딥러닝 기반 DeepFace를 이용한 얼굴 인식입니다. 아래 방법 중 하나를 선택하세요.</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("사진 찍어 분석"):
            st.session_state.page = "camera_internal"
            st.rerun()

    with col2:
        if st.button("웹캠 실행"):
            # webcam.py가 현재 작업 디렉토리에 있어야 합니다.
            if not os.path.exists("webcam.py"):
                st.error("webcam.py 파일을 찾을 수 없습니다. 경로를 확인하세요.")
            else:
                try:
                    if st.session_state.webcam_proc is None or st.session_state.webcam_proc.poll() is not None:
                        st.session_state.webcam_proc = subprocess.Popen([sys.executable, "webcam.py"])
                        st.success("로컬 OpenCV 웹캠 스크립트 실행 중... (OpenCV 창을 확인하세요)")
                    else:
                        st.info("이미 웹캠 스크립트가 실행 중입니다.")
                except Exception as e:
                    st.error(f"webcam.py 실행 실패: {e}")

    st.write("---")

# ---------- 내부 카메라(사진 찍어 분석) ----------
elif st.session_state.page == "camera_internal":
    st.markdown("## 사진 찍어 분석하기")
    st.write("카메라로 사진을 찍으면 DeepFace로 분석하고, 얼굴 박스와 라벨을 표시합니다.")
    uploaded_image = st.camera_input("카메라로 사진을 찍어주세요")

    if uploaded_image is not None:
        # uploaded_image: UploadedFile (bytes)
        try:
            # bytes -> numpy image (BGR)
            file_bytes = np.asarray(bytearray(uploaded_image.read()), dtype=np.uint8)
            img_bgr = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
            if img_bgr is None:
                st.error("이미지를 읽을 수 없습니다.")
            else:
                # 분석 (DeepFace) — 예외 처리 포함
                try:
                    result = DeepFace.analyze(
                        img_bgr,
                        actions=["age", "gender", "race", "emotion"],
                        enforce_detection=False
                    )

                    # DeepFace 결과가 리스트 또는 dict 형태일 수 있음
                    if isinstance(result, list) and len(result) > 0:
                        d = result[0]
                    elif isinstance(result, dict):
                        d = result
                    else:
                        d = None

                    st.session_state.last_analysis = d  # 최근 결과 저장

                    display_img = img_bgr.copy()
                    label_text = ""

                    if d:
                        region = d.get("region", None)
                        age = d.get("age", "")
                        gender = d.get("dominant_gender", "")
                        race = d.get("dominant_race", "")
                        emotion = d.get("dominant_emotion", "")

                        label_text = f"{age} | {gender} | {race} | {emotion}"

                        # 성별 카운트 업데이트 (0~1 비율 누적)
                        gender_lower = str(gender).lower()
                        if "male" in gender_lower or "man" in gender_lower:
                            st.session_state.gender_counts["Male"] += 0.7
                            st.session_state.gender_counts["Female"] += 0.3
                        elif "female" in gender_lower or "woman" in gender_lower:
                            st.session_state.gender_counts["Male"] += 0.3
                            st.session_state.gender_counts["Female"] += 0.7
                        else:
                        # 판별 불명확하면 남/여 각각 0.5씩
                            st.session_state.gender_counts["Male"] += 0.5
                            st.session_state.gender_counts["Female"] += 0.5

                        if region:
                            x = int(max(0, region.get("x", 0)))
                            y = int(max(0, region.get("y", 0)))
                            w = int(max(0, region.get("w", 0)))
                            h = int(max(0, region.get("h", 0)))

                            h_img, w_img = display_img.shape[:2]
                            x = min(x, w_img-1)
                            y = min(y, h_img-1)
                            w = min(w, w_img - x)
                            h = min(h, h_img - y)

                            cv2.rectangle(display_img, (x, y), (x+w, y+h), (0,255,0), 2)
                            cv2.putText(display_img, label_text, (x, max(0, y-10)),
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2)
                    else:
                        st.warning("분석 결과가 없습니다.")

                    # BGR -> RGB for display
                    display_rgb = cv2.cvtColor(display_img, cv2.COLOR_BGR2RGB)
                    st.image(display_rgb, caption=label_text, use_container_width=True)

                    # 결과 텍스트 출력(세부)
                    st.write("**분석 결과 원본 데이터**")
                    st.json(d)

                except Exception as e:
                    st.error(f"DeepFace 분석 중 오류 발생: {e}")
                    traceback.print_exc()
        except Exception as e:
            st.error(f"이미지 처리 중 오류: {e}")
            traceback.print_exc()

    st.markdown("---")
    c1, c2 = st.columns(2)
    with c1:
        if st.button("결과 화면으로 이동"):
            st.session_state.page = "result"
            st.rerun()
    with c2:
        if st.button("뒤로가기"):
            st.session_state.page = "home"
            st.rerun()


# ---------- 결과 화면 (세로 카드 3개) ----------
elif st.session_state.page == "result":
    st.markdown("## 결과 화면")
    st.write("측정 결과는 아래 카드에 표시됩니다.")

    # --- 첫 번째 카드: 남자/여자 막대그래프 ---
    st.markdown(
        """
        <div style="
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.08);
            padding: 16px;
            margin-bottom: 12px;">
            <div style="font-size:18px; font-weight:700; margin-bottom:6px;">성별</div>
            <div style="font-size:13px; color:#333; margin-bottom:8px;">분석된 얼굴 속 남성과 여성 비율</div>
        </div>
        """,
        unsafe_allow_html=True
    )

    # 막대그래프 데이터 준비
    gender_counts = st.session_state.gender_counts.copy()  # {'Male': n, 'Female': m}
    df_gender = pd.DataFrame({
        "gender": list(gender_counts.keys()),
        "count": list(gender_counts.values())
    }).set_index("gender")

    # 그래프 출력 (st.bar_chart 사용)
    st.bar_chart(df_gender)

    # --- 두 번째/세 번째 카드(자리만) ---
    for idx in range(2, 4):
        card_html = f"""
        <div style="
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 6px 18px rgba(0,0,0,0.08);
            padding: 24px;
            height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: left;
            margin-bottom: 20px;">
            <div style="font-size:20px; font-weight:700; margin-bottom:8px;">카드 {idx}</div>
            <div style="font-size:14px; color:#333;">여기에 그래프/수치/이미지 등을 넣으세요.</div>
        </div>
        """
        st.markdown(card_html, unsafe_allow_html=True)

    st.markdown("---")
    if st.button("홈으로 돌아가기"):
        st.session_state.page = "home"
        st.rerun()

# ---------- 종료 버튼 (webcam.py가 서브프로세스로 실행된 경우 종료 처리) ----------
if st.session_state.webcam_proc is not None:
    stop_col, info_col = st.columns([1, 3])
    with stop_col:
        if st.button("로컬 웹캠 종료"):
            try:
                if st.session_state.webcam_proc.poll() is None:
                    st.session_state.webcam_proc.terminate()
                    st.session_state.webcam_proc = None
                    st.success("로컬 웹캠 스크립트를 종료했습니다.")
                else:
                    st.info("이미 종료되어 있습니다.")
            except Exception as e:
                st.error(f"종료 중 오류: {e}")
    with info_col:
        st.write("로컬 OpenCV 윈도우가 열려있습니다. (직접 종료하려면 q를 누르세요.)")
